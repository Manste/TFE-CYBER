import java.util.List

var List<String> unauthorizedPersonsList = newArrayList()
var int lastPersonDetectedFrame = -1
var int lastActionDetectedFrame = -1
var String lastUnauthorizedPerson = ""
var String lastAction = ""

val int maxFrameDifference = 5 // Maximum allowed frame difference

val unauthorizedPersons = newArrayList("Unknown", "Manuelle")
val unauthorizedAction = "open"

rule "Handle Recognized Person and Action Event"
when
    Channel "mqtt:topic:mqttHome:mqttHomeTopic:DetectedPersonEvent" triggered or
    Channel "mqtt:topic:mqttHome:mqttHomeTopic:DetectedActionEvent" triggered
then
    val eventSource = triggeringChannel
    val eventData = receivedEvent
    logInfo("FaceRecognition", "Raw Event Received: " + eventData + " from " + eventSource)

    try {
        val parts = eventData.split(":")
        if (parts.length < 2) {
            logWarn("FaceRecognition", "Invalid event format: " + eventData)
            return
        }

        val frameCounter = Integer::parseInt(parts.get(0).trim) // Extract frame counter
        val eventInfo = parts.get(1).trim // Extract event details

        if (eventSource.contains("DetectedPersonEvent")) {
            // Process Person Event
            val personList = eventInfo.replace("[", "").replace("]", "").replace("\"", "").split(",")
            for (person : personList) {
                val trimmedPerson = person.trim
                if (unauthorizedPersons.contains(trimmedPerson) && !unauthorizedPersonsList.contains(trimmedPerson) ) {
                    logWarn("FaceRecognition", "Unauthorized person detected: " + trimmedPerson + " at frame " + frameCounter)

                    // Store detected person
                    unauthorizedPersonsList.add(trimmedPerson)
                    lastUnauthorizedPerson = trimmedPerson
                    lastPersonDetectedFrame = frameCounter
                }
            }

            // Check if an unauthorized action was already buffered
            val frameDifference = lastActionDetectedFrame - frameCounter
            if (lastAction == unauthorizedAction && frameDifference >= 0 && frameDifference <= maxFrameDifference && unauthorizedPersons.size() > 0) {
                logWarn("AlarmModule", "Unauthorized action **already happened before** and now matching person detected! Triggering alarm.")
                executeCommandLine("python3", "/etc/openhab/scripts/alarm.py", lastUnauthorizedPerson, "&")

                // Reset after triggeringeventData
                unauthorizedPersonsList.clear()
                lastPersonDetectedFrame = -1
                lastUnauthorizedPerson = ""
                lastAction = ""
                lastActionDetectedFrame = -1
            }
        } else if (eventSource.contains("DetectedActionEvent")) {
            // Process Action Event
            val frameDifference = frameCounter - lastPersonDetectedFrame
            if ( unauthorizedPersonsList.size > 0 && frameDifference >= 0 && frameDifference <= maxFrameDifference && eventData == unauthorizedAction) {
                logWarn("ActionRecognition", "Unauthorized action detected & recently matched with unauthorized person! Triggering alarm.")
                executeCommandLine("python3", "/etc/openhab/scripts/alarm.py", lastUnauthorizedPerson, "&")

                // Reset after triggering
                unauthorizedPersonsList.clear()
                lastPersonDetectedFrame = -1
                lastUnauthorizedPerson = ""
            } 

            lastAction = eventInfo
            lastActionDetectedFrame = frameCounter
        }

        logInfo("Comparison.rules", "Action Frame: " + lastActionDetectedFrame + 
            " | Person Frame: " + lastPersonDetectedFrame + 
            " | Last Action: " + lastAction + 
            " | Persons: " + unauthorizedPersonsList.toString())
    } catch (Exception e) {
        logError("FaceRecognition", "Error processing event: " + e.message)
    }
end
